# This is a basic workflow to help you get started with Actions

name: BuildScanPushDockerImage

on:
  push:
    branches: [ main ]
 
env:
  TRIVY_VERSION: 0.34.0
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_image_push_to_ECR:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # see: https://github.com/aws-actions/configure-aws-credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    # see: https://github.com/aws-actions/amazon-ecr-login
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        
    
          
    - name: Install Trivy
      run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
        
    - name: Image Scan
      id: trivy
      env:
       	ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
       #  trivy image --format sarif --template "@contrib/sarif.tpl" -o trivy-results-docker.sarif  --severity MEDIUM,HIGH,CRITICAL --exit-code 0 "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
        trivy image --format table --severity MEDIUM,HIGH,CRITICAL --exit-code 1 "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
          continue-on-error: true

    - name: Notify if critical vulnerabilities are found
      if: steps.trivy.outputs.exit_code == '1' && contains(steps.trivy.outputs.stdout, 'CRITICAL')
      env:
         AWS_REGION: us-east-1
         SNS_TOPIC_ARN: arn:aws:sns:us-east-1:558940753150:test-trivy
      run: |
         aws sns publish --topic-arn $SNS_TOPIC_ARN --region $AWS_REGION --message "Critical vulnerabilities found in Docker image"

         
    #- name: Upload Trivy scan results to GitHub Security tab
     # uses: github/codeql-action/upload-sarif@v2
      #with:
       # sarif_file: 'trivy-results-docker.sarif'

      #- name: Image Scan
        
    
    
     
    - name: PUSH Image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
