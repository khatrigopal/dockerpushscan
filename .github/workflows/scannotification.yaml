# This is a basic workflow to help you get started with Actions

name: BuildScanPushDockerImage

on:
  push:
    branches: [ master ]
 
env:
  TRIVY_VERSION: 0.34.0
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_image_push_to_ECR:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # see: https://github.com/aws-actions/configure-aws-credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    # see: https://github.com/aws-actions/amazon-ecr-login
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        
    
          
    - name: Install Trivy
      run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
    
    - name : Trivy Scan
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
         trivy image "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" --exit-code 0 || echo "Trivy scan completed"
         
    - name: Send SNS Notification for Critical Vulnerabilities
      if: ${{ always() }}
      run: |
          trivy image "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} --severity CRITICAL --format json \
          | jq '.[] | "Critical vulnerability found: \(.VulnerabilityID) \(.Title) \(.Severity)"' \
          | xargs -I {} aws sns publish --topic-arn arn:aws:sns:us-east-1:558940753150:test-trivy --message critical VA
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Send SNS Notification for High Vulnerabilities
      if: ${{ always() }}
      run: |
          trivy image <your-docker-image-name>:<tag> --severity HIGH --format json \
          | jq '.[] | "High vulnerability found: \(.VulnerabilityID) \(.Title) \(.Severity)"' \
          | xargs -I {} aws sns publish --topic-arn arn:aws:sns:us-east-1:558940753150:test-trivy --message HIGH VA
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} 
    
    - name: Stop Pipeline for Critical Vulnerabilities
      if: ${{ always() && steps.scan.outcome == 'success' && contains(toJSON(steps.scan.outputs), 'CRITICAL') }}
      run: exit 1
      
    
     
    - name: PUSH Image to Amazon ECR
      if: ${{ always() && steps.scan.outcome == 'success' && !contains(toJSON(steps.scan.outputs), 'CRITICAL') }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
